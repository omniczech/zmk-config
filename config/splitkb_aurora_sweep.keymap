/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define U_MOUSE_MOVE_MAX 1400                     /* <--- New max speed setting (default: 600) */
#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)

&mmv {
	time-to-max-speed-ms = <400>;             /* <--- How long time until max speed is reached (default: 500) */
    acceleration-exponent=<2>;
};

&mt {
	quick_tap_ms = <200>;
    flavor = "tap-preferred";
    tapping_term_ms = <275>;
};

/ { 
	behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        

        
    };

        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&td ESC Q   &kp W       &kp F       	&kp P       &kp B 	    		&kp J   		&kp L       &kp U       &kp Y       &kp SEMI 
		&mt LCTL A  &mt LALT R  &mt LGUI S  	&mt LSFT T  &kp G 	    		&kp M   		&mt LSFT N  &mt LGUI E  &mt LALT I  &mt LCTL O
		&mt LSFT Z  &kp X       &kp C       	&kp D       &kp V				&kp K   		&kp H       &kp CMMA    &kp DOT     &mt LSFT FSLH
          				                    	&sk LSHIFT &mt LC(LS(LALT)) SPC     		&mt RCTRL ENTER &to 1
		>;
		};

       	left_layer {
			bindings = <
			&kp ESC  	&kp ATSN    &td LC(LG(LS(N4))) HASH 	&kp DLLR    &kp PRCNT		&kp CARET &kp LS(COMMA) &kp LS(DOT) &kp SEMI &kp BKSP 
			&kp TAB     &kp EQUAL   &kp LA(RBKT)      			&kp LA(LS(RBKT))     &kp SQT 		&kp BSLH &kp LBRC  &kp RBRC &kp PIPE  &kp ENTER
			&kp TILDE   &kp LA(N3)	&kp LA(LBKT) 				&kp LA(LS(LBKT))  &kp DQT 	&kp LBKT &kp LPRN &kp RPRN &kp RBKT  &to 3 
																&to 0  &sk LSHIFT  					&sk RALT &to 2 
			>;
		};
		
		right_layer {
			bindings = <
			&kp ESC  &kp C_PP &kp C_PREV  &kp C_NEXT  &kp LS(MINUS)    			&kp MINUS  &kp N7 &kp N8 &kp N9 &trans
			&kp TAB  &trans   &kp C_VOL_DN  &kp C_VOL_UP  &kp LS(EQUAL) 			&kp EQUAL &kp N4  &kp N5  &kp N6   &kp ENTER
			&to 4  &kp AMPS &kp SLASH &kp STAR &kp DOT    			&kp N0 &kp N1 &kp N2 &kp N3  &trans 
						&to 0 &sk LGUI  				&sk RALT  &to 2 
			>;
		};
		
		tri_layer {
			bindings = <
			&trans  &mwh SCROLL_LEFT    &mmv MOVE_UP    &mwh SCROLL_RIGHT    &kp NUM_5 			&kp LG(LBKT)   &kp LC(LS(TAB))   &kp RC(TAB) &kp LG(RBKT) &trans
			&kp F1 &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &kp DEL  						&kp LEFT &kp DOWN  &kp UP &kp RIGHT &kp ENTER 
			&td LG(GRAVE) GRAVE &mkp RCLK  &mwh SCROLL_UP &mwh SCROLL_DOWN &trans   				&mkp LCLK &kp PG_DN  &kp K_VOL_DN  &trans &trans   
						&to 0 &trans  					&sk RALT &to 1 
			>;
		};	
		bt {
			bindings = <
			&trans  &trans &trans &trans &trans &trans &trans &trans &trans &trans 
			&trans  &trans &trans &trans &trans &trans &trans &trans &trans &trans 
			&bt BT_PRV  &bt BT_NXT &bt BT_CLR &trans &trans   				&trans &trans  &trans  &trans &trans   
						&to 0 &trans  					&trans &to 1 
			>;
		};	
        
	};
};
